{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://export-folder/./src/bulma.ts","webpack://export-folder/webpack/bootstrap","webpack://export-folder/./src/kanji-api.ts","webpack://export-folder/./src/main.ts","webpack://export-folder/./src/web-handler.ts","webpack://export-folder/./src/utils.ts"],"sourcesContent":["// Mobile Menu\r\nconst burgerIcon = document.querySelector(\"#burger\") as HTMLDivElement;\r\nconst navbarMenu = document.querySelector(\"#nav-links\") as HTMLDivElement;\r\n\r\n// Add functionality to the taskbar\r\nburgerIcon.addEventListener('click', () => {\r\n    navbarMenu.classList.toggle('is-active');\r\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// ===== | Imports | =====\r\nimport { fetchJson } from \"./web-handler\"\r\nimport { randomInt } from \"./utils\"\r\n\r\n// ===== | Interfaces | =====\r\n\r\n/** Object that is given by the kanji api */\r\ninterface KanjiObject {\r\n    grade: number,\r\n    jlpt: number,\r\n    kanji: string,\r\n    kun_readings: string[],\r\n    meanings: string[],\r\n    name_readings: string[],\r\n    on_readings: string[],\r\n    stroke_count: number\r\n}\r\n\r\ninterface kanjiLibrary {\r\n    [key: string]: string\r\n}\r\n\r\n// ===== | Variables | =====\r\n\r\n// Important constistent variables\r\nconst KanjiAPI_URL: string = 'https://kanjiapi.dev/v1/';\r\nconst libraryKey: string = \"kanji-library\";\r\nconst loadingImgTag:string = \"<img src='media/loading.gif' alt='downloading'>\";\r\n\r\nlet kanjiList: string[];\r\nlet currentKanji: KanjiObject;\r\nlet kanjiLibrary: kanjiLibrary;\r\n\r\n// Containers\r\nlet kanjiContainer: HTMLDivElement;\r\nlet libraryContainer: HTMLDivElement;\r\nlet chosenKanjiContainer: HTMLSpanElement;\r\n\r\n// ===== | Methods | =====\r\n\r\n/** initalizes the KanjiAPI, getting the kanji from local storage */\r\nexport const initKanjiAPI = () => {\r\n    // Get a reference to the divContainer for the kanji\r\n    kanjiContainer = document.querySelector('#container') as HTMLDivElement;\r\n    libraryContainer = document.querySelector('#library-kanji') as HTMLDivElement;\r\n    chosenKanjiContainer = document.querySelector('#chosen-kanji') as HTMLSpanElement;\r\n\r\n    // ----- | Get the local storage of the browser | -----\r\n    kanjiLibrary = {};\r\n\r\n    // Parse the local storage of the page into a variable\r\n    let storage: string | null = localStorage.getItem(libraryKey);\r\n\r\n    // If storage is not null\r\n    if (storage) {\r\n        // Parse this information into the kanji library\r\n        kanjiLibrary = JSON.parse(storage)\r\n\r\n        updateLibrary();\r\n    }\r\n\r\n    // ----- | Initialize the kanjiList to be a list of all the kanji | -----\r\n    // Get the list of every possible kanji\r\n    let url: string = KanjiAPI_URL + `kanji/all`;\r\n\r\n    // Fetch the first random kanji when the page loads\r\n    fetchJson(url).then((response) => {\r\n        // set the kanji list to the response\r\n        kanjiList = response;\r\n\r\n        // load a random kanji\r\n        loadRandomKanji();\r\n    });\r\n}\r\n\r\n/** Updates the list that the random kanji is picked from */\r\nexport const updateKanjiList = (newlist:string) => {\r\n    // create the new url\r\n    let url: string = KanjiAPI_URL + newlist;\r\n\r\n    // try to fetch the new list\r\n    fetchJson(url).then((response) => {\r\n        // set the new list if successful\r\n        kanjiList = response;\r\n    }).catch(() => {\r\n        // throw a console log if it fails\r\n        console.log(\"Error Updating List, Make Sure Values Are Correct\");\r\n    });\r\n}\r\n\r\n/** save the current kanji to the kanji library */\r\nexport const saveKanji = () => {\r\n    // If the current kanji isn't already in the library\r\n    if (kanjiLibrary[currentKanji.kanji] == null)\r\n    {\r\n        // Add the current kanji as a new entry\r\n        kanjiLibrary[currentKanji.kanji] = currentKanji.kanji;\r\n        \r\n        // update the library to make it visible to the user\r\n        updateLibrary();\r\n\r\n        // Update the local storage\r\n        localStorage.setItem(libraryKey, JSON.stringify(kanjiLibrary));\r\n    }\r\n}\r\n\r\n/** removes the selected kanji from the library */\r\nexport const removeKanji = () => {\r\n    // Get the key from the value of from the chosen kanji container\r\n    let index: string | undefined = chosenKanjiContainer.dataset.value;\r\n    \r\n    // if the key is not undefined\r\n    if (index)\r\n    {\r\n        // delete that entry from the library\r\n        delete kanjiLibrary[index];\r\n\r\n        // reset the chosen kanji container\r\n        chosenKanjiContainer.dataset.value = \"\";\r\n        chosenKanjiContainer.innerHTML = \"\";\r\n\r\n        // update the library to make it visible to the user\r\n        updateLibrary();\r\n\r\n        // Update the local storage\r\n        localStorage.setItem(libraryKey, JSON.stringify(kanjiLibrary));\r\n    }\r\n}\r\n\r\n/** search the selected kanji from the library */\r\nexport const searchKanji = () => {\r\n    // Get the kanji from the value of from the chosen kanji container\r\n    let kanji: string | undefined = chosenKanjiContainer.dataset.value;\r\n    \r\n    // If the kanji is not undefined\r\n    if (kanji)\r\n    {\r\n        // load that kanji\r\n        loadNewKanji(kanji)\r\n    }\r\n}\r\n\r\n/** updates the kanji library UI */\r\nconst updateLibrary = () => {\r\n    // clear the library\r\n    let newElement: string = \"\";\r\n\r\n    // For every kanji entry\r\n    for (let kanji in kanjiLibrary)\r\n    {\r\n        // Add them to the library\r\n        newElement += `<div class='library-item is-clickable is-size-1 p-2'>${kanji}</div>`;\r\n    }\r\n\r\n    // Put it in the container on the page\r\n    libraryContainer.innerHTML = newElement;\r\n\r\n    // Get all the library items\r\n    let libraryItems = document.querySelectorAll('.library-item') as NodeListOf<HTMLDivElement>;\r\n\r\n    // For each item\r\n    libraryItems.forEach((kanji) => {\r\n        // Add a new event to update the chosen kanji when a new kanji is clicked\r\n        kanji.addEventListener('click', () => {\r\n            chosenKanjiContainer.dataset.value = kanji.innerHTML;\r\n            chosenKanjiContainer.innerHTML = `${kanji.innerHTML} is selected.`;\r\n        })\r\n    })\r\n}\r\n\r\n// ----- | Load Kanji Functions | -----\r\n\r\n/** Takes a kanji and the div container, \r\n * load the file and adds it content in a list */\r\nexport const loadNewKanji = (kanji: string) => {\r\n    // Create the url used for the fetch\r\n    let url: string = KanjiAPI_URL + `kanji/${kanji}`\r\n\r\n    kanjiContainer.innerHTML = loadingImgTag;\r\n\r\n    // fetch the json, and continue if it succeeds\r\n    fetchJson(url).then((response) => {\r\n        // Set the current kanji to the newly aquired one\r\n        currentKanji = response;\r\n\r\n        // Prepare the information variables \r\n        let kanji:string = `<p class=\"is-size-1\">${currentKanji.kanji}</p>`;\r\n        let stroke:string = `Stroke Count: ${currentKanji.stroke_count}`;\r\n        let grade:string = \"Grade: \";\r\n        let jlpt:string = \"JLPT: \";\r\n        let kunReadings:string = \"Kun Readings: \";\r\n        let onReadings:string = \"On Readings: \";\r\n        let nameReadings:string = \"Name Readings: \";\r\n        let meanings:string = \"Meanings: \";\r\n        \r\n        // Set the grade of the kanji\r\n        grade += currentKanji.grade != null? currentKanji.grade.toString() : \"None\";\r\n\r\n        // Set the jlpt level of the kanji\r\n        jlpt += currentKanji.jlpt != null? currentKanji.jlpt.toString() : \"None\";\r\n\r\n        // Set the kun readings (array) of the kanji\r\n        if (currentKanji.kun_readings.length != 0)\r\n        {\r\n            kunReadings += currentKanji.kun_readings.join(', ');\r\n        }\r\n        else\r\n        {\r\n            kunReadings += \"None\"\r\n        }\r\n\r\n        // Set the on readings (array) of the kanji\r\n        if (currentKanji.on_readings.length != 0)\r\n        {\r\n            onReadings += currentKanji.on_readings.join(', ');\r\n        }\r\n        else\r\n        {\r\n            onReadings += \"None\"\r\n        }\r\n\r\n        // Set the name readings (array) of the kanji\r\n        if (currentKanji.name_readings.length != 0)\r\n        {\r\n            nameReadings += currentKanji.name_readings.join(', ');\r\n        }\r\n        else\r\n        {\r\n            nameReadings += \"None\"\r\n        }\r\n\r\n        // Set the meanings (array) of the kanji\r\n        if (currentKanji.meanings.length != 0)\r\n        {\r\n            meanings += currentKanji.meanings.join(', ');\r\n        }\r\n        else\r\n        {\r\n            meanings += \"None\"\r\n        }\r\n\r\n        // Create a new unordered list and fill it with the contents\r\n        let newElement: string = `<ul class=\"\">`;\r\n        newElement += `<li>${stroke}</li>`;\r\n        newElement += `<li>${grade}</li>`;\r\n        newElement += `<li>${jlpt}</li>`;\r\n        newElement += `<li>${kunReadings}</li>`;\r\n        newElement += `<li>${onReadings}</li>`;\r\n        newElement += `<li>${nameReadings}</li>`;\r\n        newElement += `<li>${meanings}</li>`;\r\n        newElement += `</ul>`;\r\n\r\n        // Set the containers contents equal to the new elements\r\n        kanjiContainer.innerHTML = `${kanji + newElement}`;\r\n    });\r\n}\r\n\r\n/**Load a random kanji */\r\nexport const loadRandomKanji = () => {\r\n    // Get a random number\r\n    let index: number = randomInt(0, kanjiList.length - 1);\r\n\r\n    // display a random Kanji\r\n    loadNewKanji(kanjiList[index]);\r\n}","// ===== | Imports | =====\r\nimport * as kanjiApi from \"./kanji-api\";\r\nimport \"./bulma\";\r\n\r\n// ===== | Functions | =====\r\n\r\n/** Initalizes the app */\r\nconst init = () => {\r\n    // Setup the UI\r\n    initUI();\r\n\r\n    // Call init function\r\n    kanjiApi.initKanjiAPI();\r\n}\r\n\r\nconst initUI = () => {\r\n    // Get refrences to all of the inputs in the app\r\n    const kanjiInput = document.querySelector(\"#input-kanji\") as HTMLInputElement;\r\n    const kanjiGetButton = document.querySelector(\"#btn-get-kanji\") as HTMLButtonElement;\r\n    const kanjiRandomButton = document.querySelector(\"#btn-random-kanji\") as HTMLButtonElement;\r\n    const kanjiSaveButton = document.querySelector(\"#btn-save-kanji\") as HTMLButtonElement;\r\n    const kanjiSearchButton = document.querySelector(\"#btn-search-kanji\") as HTMLButtonElement;\r\n    const kanjiRemoveButton = document.querySelector(\"#btn-remove-kanji\") as HTMLButtonElement;\r\n    const kanjiListSelect = document.querySelector(\"#select-list-kanji\") as HTMLSelectElement;\r\n    \r\n    kanjiGetButton.addEventListener('click', () => {\r\n        if (kanjiInput.value != \"\")\r\n        {\r\n            kanjiApi.loadNewKanji(kanjiInput.value);\r\n        }\r\n    });\r\n\r\n    kanjiRandomButton.addEventListener('click', () => {\r\n        kanjiApi.loadRandomKanji();\r\n    });\r\n\r\n    kanjiSaveButton.addEventListener('click', () => {\r\n        kanjiApi.saveKanji();\r\n    });\r\n\r\n    kanjiSearchButton.addEventListener('click', () => {\r\n        kanjiApi.searchKanji();\r\n    });\r\n\r\n    kanjiRemoveButton.addEventListener('click', () => {\r\n        kanjiApi.removeKanji();\r\n    });\r\n\r\n    kanjiListSelect.addEventListener('change', () => {\r\n        kanjiApi.updateKanjiList(kanjiListSelect.value);\r\n    });\r\n}\r\n\r\n// ===== | Call Init | =====\r\ninit();\r\n","// ===== | Methods | =====\r\n\r\n/** Takes a URL to a web service and returns the JSON */\r\nconst fetchJson = async (url: string) => {\r\n    // Return the result of fect dependin on if it succeed and fail\r\n    return fetch(url)\r\n        // If it succeeds\r\n        .then((response) => {\r\n            // If the response is not good then throw an error\r\n            if (!response.ok) {\r\n                throw new Error(`Network response was not OK. Status: ${response.status}`);\r\n            }\r\n        \r\n            // Return the json from the response if everything is good\r\n            return response.json();\r\n        })\r\n        // If it tails\r\n        .catch((error) => {\r\n            // Throw an error\r\n            console.error('Error fetching data:', error);\r\n            throw error; // Rethrow the error\r\n        });\r\n}\r\n\r\n// ===== | Exports | =====\r\n\r\nexport { fetchJson }","// ===== | Helper Functions | =====\r\nexport const randomInt = (min:number = 0, max:number = 1) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}"],"names":["burgerIcon","document","querySelector","navbarMenu","addEventListener","classList","toggle","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","kanjiList","currentKanji","kanjiLibrary","kanjiContainer","libraryContainer","chosenKanjiContainer","kanjiInput","kanjiGetButton","kanjiRandomButton","kanjiSaveButton","kanjiSearchButton","kanjiRemoveButton","kanjiListSelect","fetchJson","url","fetch","then","response","ok","Error","status","json","catch","error","console","KanjiAPI_URL","libraryKey","updateLibrary","newElement","kanji","innerHTML","querySelectorAll","forEach","dataset","value","loadNewKanji","stroke","stroke_count","grade","jlpt","kunReadings","onReadings","nameReadings","meanings","toString","kun_readings","length","join","on_readings","name_readings","loadRandomKanji","min","max","index","Math","floor","random","localStorage","setItem","JSON","stringify","newlist","log","storage","getItem","parse"],"sourceRoot":""}